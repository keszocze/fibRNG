cabal-version:       2.4
name:                fib-rng-clash
version:             0.1
license:             BSD-2-Clause
author:              Oliver Keszöcze <fibrng@oliver.keszoecze.de>
maintainer:          Oliver Keszöcze <fibrng@oliver.keszoecze.de>

common common-options
  default-extensions:
    BangPatterns
    BinaryLiterals
    ConstraintKinds
    DataKinds
    DefaultSignatures
    DeriveAnyClass
    DeriveDataTypeable
    DeriveFoldable
    DeriveFunctor
    DeriveGeneric
    DeriveLift
    DeriveTraversable
    DerivingStrategies
    FlexibleContexts
    InstanceSigs
    KindSignatures
    LambdaCase
    NamedFieldPuns
    NoStarIsType
    PolyKinds
    RankNTypes
    RecordWildCards
    ScopedTypeVariables
    StandaloneDeriving
    TupleSections
    TypeApplications
    TypeFamilies
    TypeOperators
    ViewPatterns

    -- TemplateHaskell is used to support convenience functions such as
    -- 'listToVecTH' and 'bLit'.
    TemplateHaskell
    QuasiQuotes

    -- Prelude isn't imported by default as Clash offers Clash.Prelude
    NoImplicitPrelude
  ghc-options:
    -Wall -Wcompat
    -haddock

    -- Plugins to support type-level constraint solving on naturals
    -fplugin GHC.TypeLits.Extra.Solver
    -fplugin GHC.TypeLits.Normalise
    -fplugin GHC.TypeLits.KnownNat.Solver

    -- Clash needs access to the source code in compiled modules
    -fexpose-all-unfoldings

    -- Worker wrappers introduce unstable names for functions that might have
    -- blackboxes attached for them. You can disable this, but be sure to add
    -- a no-specialize pragma to every function with a blackbox.
    -fno-worker-wrapper

    -- Strict annotations - while sometimes preventing space leaks - trigger
    -- optimizations Clash can't deal with. See:
    --
    --    https://github.com/clash-lang/clash-compiler/issues/2361
    --
    -- These flags disables these optimizations. Note that the fields will
    -- remain strict.
    -fno-unbox-small-strict-fields
    -fno-unbox-strict-fields
  build-depends:
    base,
    Cabal,

    -- clash-prelude will set suitable version bounds for the plugins
    clash-prelude >= 1.8.2 && < 1.10,
    containers,
    extra,
    ghc-typelits-natnormalise,
    ghc-typelits-extra,
    ghc-typelits-knownnat,
    template-haskell,
    transformers


library
  import: common-options
  hs-source-dirs: src
  exposed-modules:
    Example.Project
    LFSR
    LFSR.Fibonacci
    LFSR.Fibonacci.MaxLenTaps
  default-language: Haskell2010

-- Builds the executable 'clash', with fib-rng-clash project in scope
executable clash
  main-is: bin/Clash.hs
  default-language: Haskell2010
  Build-Depends: base, clash-ghc, fib-rng-clash, split
  if !os(Windows)
    ghc-options: -dynamic

-- Builds the executable 'clashi', with fib-rng-clash project in scope
executable clashi
  main-is: bin/Clashi.hs
  default-language: Haskell2010
  if !os(Windows)
    ghc-options: -dynamic
  build-depends: base, clash-ghc, fib-rng-clash

test-suite doctests
  type:             exitcode-stdio-1.0
  default-language: Haskell2010
  main-is:          doctests.hs
  ghc-options:      -Wall -Wcompat -threaded
  hs-source-dirs:   tests
  build-depends:
    base,
    fib-rng-clash,
    doctest-parallel >= 0.2 && < 0.4,

test-suite test-library
  import: common-options
  default-language: Haskell2010
  hs-source-dirs: tests
  type: exitcode-stdio-1.0
  ghc-options: -threaded
  main-is: unittests.hs
  other-modules:
    Tests.Example.Project
    Tests.LFSR.Fibonacci
  build-depends:
    fib-rng-clash,
    QuickCheck,
    clash-prelude-hedgehog,
    hedgehog,
    tasty >= 1.2 && < 1.6,
    tasty-hedgehog,
    tasty-hunit,
    tasty-th,
    template-haskell
